name: CI/CD Pipeline

on:
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Log in to AWS ECR
        run: |
          aws configure
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/y6k5k4h5

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build -t adex-todo .
          docker tag adex-todo:latest public.ecr.aws/y6k5k4h5/adex-todo:latest

      - name: Docker image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: my-node-app

      # Push Docker image to Amazon ECR Public
      - name: Push Docker image
        run: docker push public.ecr.aws/y6k5k4h5/adex-todo:latest

  deploy_dev:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to ECS (Dev)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ECS_DEV_HOST }}
          username: ${{ secrets.ECS_DEV_USERNAME }}
          key: ${{ secrets.ECS_DEV_SSH_KEY }}
          script: |
            ssh -o StrictHostKeyChecking=no ${{ secrets.ECS_DEV_USERNAME }}@${{ secrets.ECS_DEV_HOST }} 'docker-compose -f docker-compose.dev.yml pull && docker-compose -f docker-compose.dev.yml up -d'

  deploy_prod:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to ECS (Prod)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ECS_PROD_HOST }}
          username: ${{ secrets.ECS_PROD_USERNAME }}
          key: ${{ secrets.ECS_PROD_SSH_KEY }}
          script: |
            ssh -o StrictHostKeyChecking=no ${{ secrets.ECS_PROD_USERNAME }}@${{ secrets.ECS_PROD_HOST }} 'docker-compose -f docker-compose.prod.yml pull && docker-compose -f docker-compose.prod.yml up -d'
